// Generated by Haxe 5.0.0-alpha.1+1423a5f
#include <hxcpp.h>

#ifndef INCLUDED_ANSI
#include <ANSI.h>
#endif
#ifndef INCLUDED_Attribute
#include <Attribute.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_225_aset,"ANSI","aset",0x6511436c,"ANSI.aset","ANSI.hx",225,0xb96f47db)
HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_119_detectSupport,"ANSI","detectSupport",0x97b93101,"ANSI.detectSupport","ANSI.hx",119,0xb96f47db)
static const ::String _hx_array_data_2b3256c3_3[] = {
	HX_("colors",b0,c5,86,c6),
};
HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_67_boot,"ANSI","boot",0x65b779bd,"ANSI.boot","ANSI.hx",67,0xb96f47db)
HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_104_boot,"ANSI","boot",0x65b779bd,"ANSI.boot","ANSI.hx",104,0xb96f47db)
HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_105_boot,"ANSI","boot",0x65b779bd,"ANSI.boot","ANSI.hx",105,0xb96f47db)
HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_106_boot,"ANSI","boot",0x65b779bd,"ANSI.boot","ANSI.hx",106,0xb96f47db)
HX_LOCAL_STACK_FRAME(_hx_pos_51b16ca4e81f7d00_107_boot,"ANSI","boot",0x65b779bd,"ANSI.boot","ANSI.hx",107,0xb96f47db)

void ANSI_obj::__construct() { }

Dynamic ANSI_obj::__CreateEmpty() { return new ANSI_obj; }

void *ANSI_obj::_hx_vtable = 0;

Dynamic ANSI_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ANSI_obj > _hx_result = new ANSI_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ANSI_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3de7b04b;
}

 ::haxe::ds::EnumValueMap ANSI_obj::values;

 ::Dynamic ANSI_obj::set;

bool ANSI_obj::available;

bool ANSI_obj::strip;

bool ANSI_obj::stripIfUnavailable;

::String ANSI_obj::aset(::cpp::VirtualArray attributes){
            	HX_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_225_aset)
HXLINE( 222)		bool _hx_tmp;
HXDLIN( 222)		if (!(::ANSI_obj::strip)) {
HXLINE( 222)			if (::ANSI_obj::stripIfUnavailable) {
HXLINE( 222)				_hx_tmp = !(::ANSI_obj::available);
            			}
            			else {
HXLINE( 222)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 222)			_hx_tmp = true;
            		}
HXDLIN( 222)		if (_hx_tmp) {
HXLINE( 222)			return HX_("",00,00,00,00);
            		}
HXLINE( 111)		::String _hx_tmp1 = (HX_("\x1b""",1b,00,00,00) + HX_("[",5b,00,00,00));
HXDLIN( 111)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 111)		{
HXLINE( 111)			int _g1 = 0;
HXDLIN( 111)			while((_g1 < attributes->get_length())){
HXLINE( 111)				 ::Dynamic arg = attributes->__get(_g1);
HXDLIN( 111)				_g1 = (_g1 + 1);
HXLINE( 112)				if (!(::Std_obj::isOfType(arg,( ( ::Dynamic)(::hx::ClassOf< ::Attribute >()) )))) {
HXLINE( 112)					HX_STACK_DO_THROW((HX_("Set argument is not an Attribute: ",cd,c7,d5,d1) + ::Std_obj::string(arg)));
            				}
HXLINE( 113)				_g->push(::ANSI_obj::values->get(arg));
            			}
            		}
HXLINE( 111)		return ((_hx_tmp1 + _g->join(HX_(";",3b,00,00,00))) + HX_("m",6d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ANSI_obj,aset,return )

bool ANSI_obj::detectSupport(){
            	HX_GC_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_119_detectSupport)
HXDLIN( 119)		if ((::Sys_obj::systemName().toLowerCase().indexOf(HX_("window",f0,93,8c,52),null()) == -1)) {
HXLINE( 120)			int result = -1;
HXLINE( 121)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 125)				 ::sys::io::Process process =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("tput",db,22,02,4d),::Array_obj< ::String >::fromData( _hx_array_data_2b3256c3_3,1),null());
HXLINE( 126)				result = ( (int)(process->exitCode(null())) );
HXLINE( 127)				process->close();
            			} catch( ::Dynamic _hx_e) {
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic _g = _hx_e;
HXLINE( 129)					{
HXLINE( 129)						null();
            					}
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 130)			return (result == 0);
            		}
            		else {
HXLINE( 132)			return ::hx::IsNotNull( ::Sys_obj::getEnv(HX_("ANSICON",3f,21,7f,b9)) );
            		}
HXLINE( 119)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ANSI_obj,detectSupport,return )


ANSI_obj::ANSI_obj()
{
}

bool ANSI_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = ( set ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"aset") ) { outValue = aset_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"strip") ) { outValue = ( strip ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { outValue = ( values ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"available") ) { outValue = ( available ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"detectSupport") ) { outValue = detectSupport_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stripIfUnavailable") ) { outValue = ( stripIfUnavailable ); return true; }
	}
	return false;
}

bool ANSI_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { set=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"strip") ) { strip=ioValue.Cast< bool >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"values") ) { values=ioValue.Cast<  ::haxe::ds::EnumValueMap >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"available") ) { available=ioValue.Cast< bool >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stripIfUnavailable") ) { stripIfUnavailable=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ANSI_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ANSI_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(void *) &ANSI_obj::values,HX_("values",e2,03,b7,4f)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ANSI_obj::set,HX_("set",a2,9b,57,00)},
	{::hx::fsBool,(void *) &ANSI_obj::available,HX_("available",c9,59,83,77)},
	{::hx::fsBool,(void *) &ANSI_obj::strip,HX_("strip",d8,52,18,84)},
	{::hx::fsBool,(void *) &ANSI_obj::stripIfUnavailable,HX_("stripIfUnavailable",7b,b5,60,8b)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ANSI_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ANSI_obj::values,"values");
	HX_MARK_MEMBER_NAME(ANSI_obj::set,"set");
	HX_MARK_MEMBER_NAME(ANSI_obj::available,"available");
	HX_MARK_MEMBER_NAME(ANSI_obj::strip,"strip");
	HX_MARK_MEMBER_NAME(ANSI_obj::stripIfUnavailable,"stripIfUnavailable");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ANSI_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ANSI_obj::values,"values");
	HX_VISIT_MEMBER_NAME(ANSI_obj::set,"set");
	HX_VISIT_MEMBER_NAME(ANSI_obj::available,"available");
	HX_VISIT_MEMBER_NAME(ANSI_obj::strip,"strip");
	HX_VISIT_MEMBER_NAME(ANSI_obj::stripIfUnavailable,"stripIfUnavailable");
};

#endif

::hx::Class ANSI_obj::__mClass;

static ::String ANSI_obj_sStaticFields[] = {
	HX_("values",e2,03,b7,4f),
	HX_("set",a2,9b,57,00),
	HX_("available",c9,59,83,77),
	HX_("strip",d8,52,18,84),
	HX_("stripIfUnavailable",7b,b5,60,8b),
	HX_("aset",e1,4d,75,40),
	HX_("detectSupport",ec,af,8c,fa),
	::String(null())
};

void ANSI_obj::__register()
{
	ANSI_obj _hx_dummy;
	ANSI_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ANSI",c3,56,32,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ANSI_obj::__GetStatic;
	__mClass->mSetStaticField = &ANSI_obj::__SetStatic;
	__mClass->mMarkFunc = ANSI_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ANSI_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ANSI_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ANSI_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ANSI_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ANSI_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ANSI_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::EnumValueMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_67_boot)
HXDLIN(  67)			 ::haxe::ds::EnumValueMap _g =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXDLIN(  67)			_g->set(::Attribute_obj::Off_dyn(),0);
HXDLIN(  67)			_g->set(::Attribute_obj::Bold_dyn(),1);
HXDLIN(  67)			_g->set(::Attribute_obj::Underline_dyn(),4);
HXDLIN(  67)			_g->set(::Attribute_obj::Blink_dyn(),5);
HXDLIN(  67)			_g->set(::Attribute_obj::ReverseVideo_dyn(),7);
HXDLIN(  67)			_g->set(::Attribute_obj::Concealed_dyn(),8);
HXDLIN(  67)			_g->set(::Attribute_obj::BoldOff_dyn(),22);
HXDLIN(  67)			_g->set(::Attribute_obj::UnderlineOff_dyn(),24);
HXDLIN(  67)			_g->set(::Attribute_obj::BlinkOff_dyn(),25);
HXDLIN(  67)			_g->set(::Attribute_obj::NormalVideo_dyn(),27);
HXDLIN(  67)			_g->set(::Attribute_obj::ConcealedOff_dyn(),28);
HXDLIN(  67)			_g->set(::Attribute_obj::Black_dyn(),30);
HXDLIN(  67)			_g->set(::Attribute_obj::Red_dyn(),31);
HXDLIN(  67)			_g->set(::Attribute_obj::Green_dyn(),32);
HXDLIN(  67)			_g->set(::Attribute_obj::Yellow_dyn(),33);
HXDLIN(  67)			_g->set(::Attribute_obj::Blue_dyn(),34);
HXDLIN(  67)			_g->set(::Attribute_obj::Magenta_dyn(),35);
HXDLIN(  67)			_g->set(::Attribute_obj::Cyan_dyn(),36);
HXDLIN(  67)			_g->set(::Attribute_obj::White_dyn(),37);
HXDLIN(  67)			_g->set(::Attribute_obj::DefaultForeground_dyn(),39);
HXDLIN(  67)			_g->set(::Attribute_obj::BlackBack_dyn(),40);
HXDLIN(  67)			_g->set(::Attribute_obj::RedBack_dyn(),41);
HXDLIN(  67)			_g->set(::Attribute_obj::GreenBack_dyn(),42);
HXDLIN(  67)			_g->set(::Attribute_obj::YellowBack_dyn(),43);
HXDLIN(  67)			_g->set(::Attribute_obj::BlueBack_dyn(),44);
HXDLIN(  67)			_g->set(::Attribute_obj::MagentaBack_dyn(),45);
HXDLIN(  67)			_g->set(::Attribute_obj::CyanBack_dyn(),46);
HXDLIN(  67)			_g->set(::Attribute_obj::WhiteBack_dyn(),47);
HXDLIN(  67)			_g->set(::Attribute_obj::DefaultBackground_dyn(),49);
HXDLIN(  67)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_67_boot)
HXDLIN(  67)		values = ( ( ::haxe::ds::EnumValueMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_104_boot)
HXDLIN( 104)		set = ::Reflect_obj::makeVarArgs(::ANSI_obj::aset_dyn());
            	}
{
            	HX_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_105_boot)
HXDLIN( 105)		available = ::ANSI_obj::detectSupport();
            	}
{
            	HX_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_106_boot)
HXDLIN( 106)		strip = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_51b16ca4e81f7d00_107_boot)
HXDLIN( 107)		stripIfUnavailable = true;
            	}
}

