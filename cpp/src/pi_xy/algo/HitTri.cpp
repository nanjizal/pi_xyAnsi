// Generated by Haxe 5.0.0-alpha.1+1423a5f
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif

namespace pi_xy{
namespace algo{

void HitTri_obj::__construct() { }

Dynamic HitTri_obj::__CreateEmpty() { return new HitTri_obj; }

void *HitTri_obj::_hx_vtable = 0;

Dynamic HitTri_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitTri_obj > _hx_result = new HitTri_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HitTri_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x36c8846e) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x36c8846e;
	} else {
		return inClassId==(int)0x6c0be2ab;
	}
}

static ::pi_xy::algo::IhitObj_obj _hx_pi_xy_algo_HitTri__hx_pi_xy_algo_IhitObj= {
};

void *HitTri_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x6d20d5d3: return &_hx_pi_xy_algo_HitTri__hx_pi_xy_algo_IhitObj;
	}
	return super::_hx_getInterface(inHash);
}


HitTri_obj::HitTri_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *HitTri_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *HitTri_obj_sStaticStorageInfo = 0;
#endif

::hx::Class HitTri_obj::__mClass;

void HitTri_obj::__register()
{
	HitTri_obj _hx_dummy;
	HitTri_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.HitTri",cc,2b,ac,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< HitTri_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitTri_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitTri_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
