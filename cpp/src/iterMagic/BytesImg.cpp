// Generated by Haxe 5.0.0-alpha.1+1423a5f
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0c3dfe55964379c7_235_new,"iterMagic.BytesImg","new",0x299abc83,"iterMagic.BytesImg.new","iterMagic/Img.hx",235,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_237_set,"iterMagic.BytesImg","set",0x299e87c5,"iterMagic.BytesImg.set","iterMagic/Img.hx",237,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_243_get,"iterMagic.BytesImg","get",0x29956cb9,"iterMagic.BytesImg.get","iterMagic/Img.hx",243,0x8899afd5)
namespace iterMagic{

void BytesImg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_235_new)
            	}

Dynamic BytesImg_obj::__CreateEmpty() { return new BytesImg_obj; }

void *BytesImg_obj::_hx_vtable = 0;

Dynamic BytesImg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BytesImg_obj > _hx_result = new BytesImg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BytesImg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41930dad;
}

static ::iterMagic::Iimg_obj _hx_iterMagic_BytesImg__hx_iterMagic_Iimg= {
	( int (::hx::Object::*)(int,int))&::iterMagic::BytesImg_obj::set,
	( int (::hx::Object::*)(int))&::iterMagic::BytesImg_obj::get,
};

void *BytesImg_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed2c7ccf: return &_hx_iterMagic_BytesImg__hx_iterMagic_Iimg;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int BytesImg_obj::set(int index,int value){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_237_set)
HXLINE( 238)		{
HXLINE( 238)			 ::haxe::io::Bytes _this = this->data;
HXDLIN( 238)			int pos = ::Std_obj::_hx_int(( (Float)((index * 4)) ));
HXDLIN( 238)			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 238)			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 238)			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 238)			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            		}
HXLINE( 239)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BytesImg_obj,set,return )

int BytesImg_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_243_get)
HXDLIN( 243)		 ::haxe::io::Bytes _this = this->data;
HXDLIN( 243)		int pos = ::Std_obj::_hx_int(( (Float)((index * 4)) ));
HXDLIN( 243)		return (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesImg_obj,get,return )


::hx::ObjectPtr< BytesImg_obj > BytesImg_obj::__new() {
	::hx::ObjectPtr< BytesImg_obj > __this = new BytesImg_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BytesImg_obj > BytesImg_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BytesImg_obj *__this = (BytesImg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BytesImg_obj), true, "iterMagic.BytesImg"));
	*(void **)__this = BytesImg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BytesImg_obj::BytesImg_obj()
{
}

void BytesImg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BytesImg);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void BytesImg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val BytesImg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BytesImg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BytesImg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BytesImg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(BytesImg_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BytesImg_obj_sStaticStorageInfo = 0;
#endif

static ::String BytesImg_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("length",e6,94,07,9f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	::String(null()) };

::hx::Class BytesImg_obj::__mClass;

void BytesImg_obj::__register()
{
	BytesImg_obj _hx_dummy;
	BytesImg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.BytesImg",11,bf,c3,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BytesImg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BytesImg_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BytesImg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BytesImg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
