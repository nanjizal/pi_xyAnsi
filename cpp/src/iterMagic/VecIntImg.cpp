// Generated by Haxe 5.0.0-alpha.1+1423a5f
#include <hxcpp.h>

#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89ed8553cb251e60_180_new,"iterMagic.VecIntImg","new",0xa866fb61,"iterMagic.VecIntImg.new","iterMagic/Img.hx",180,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_89ed8553cb251e60_182_set,"iterMagic.VecIntImg","set",0xa86ac6a3,"iterMagic.VecIntImg.set","iterMagic/Img.hx",182,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_89ed8553cb251e60_188_get,"iterMagic.VecIntImg","get",0xa861ab97,"iterMagic.VecIntImg.get","iterMagic/Img.hx",188,0x8899afd5)
namespace iterMagic{

void VecIntImg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_89ed8553cb251e60_180_new)
            	}

Dynamic VecIntImg_obj::__CreateEmpty() { return new VecIntImg_obj; }

void *VecIntImg_obj::_hx_vtable = 0;

Dynamic VecIntImg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VecIntImg_obj > _hx_result = new VecIntImg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VecIntImg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x686930d3;
}

static ::iterMagic::Iimg_obj _hx_iterMagic_VecIntImg__hx_iterMagic_Iimg= {
	( int (::hx::Object::*)(int,int))&::iterMagic::VecIntImg_obj::set,
	( int (::hx::Object::*)(int))&::iterMagic::VecIntImg_obj::get,
};

void *VecIntImg_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed2c7ccf: return &_hx_iterMagic_VecIntImg__hx_iterMagic_Iimg;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int VecIntImg_obj::set(int index,int value){
            	HX_STACKFRAME(&_hx_pos_89ed8553cb251e60_182_set)
HXLINE( 183)		this->data->__unsafe_set(index,value);
HXLINE( 184)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VecIntImg_obj,set,return )

int VecIntImg_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_89ed8553cb251e60_188_get)
HXDLIN( 188)		return ( (int)(_hx_array_unsafe_get(this->data,index)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(VecIntImg_obj,get,return )


::hx::ObjectPtr< VecIntImg_obj > VecIntImg_obj::__new() {
	::hx::ObjectPtr< VecIntImg_obj > __this = new VecIntImg_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VecIntImg_obj > VecIntImg_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VecIntImg_obj *__this = (VecIntImg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VecIntImg_obj), true, "iterMagic.VecIntImg"));
	*(void **)__this = VecIntImg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VecIntImg_obj::VecIntImg_obj()
{
}

void VecIntImg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VecIntImg);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void VecIntImg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val VecIntImg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VecIntImg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VecIntImg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VecIntImg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(VecIntImg_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(VecIntImg_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(VecIntImg_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(VecIntImg_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VecIntImg_obj_sStaticStorageInfo = 0;
#endif

static ::String VecIntImg_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("length",e6,94,07,9f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	::String(null()) };

::hx::Class VecIntImg_obj::__mClass;

void VecIntImg_obj::__register()
{
	VecIntImg_obj _hx_dummy;
	VecIntImg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.VecIntImg",ef,b6,d3,19);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VecIntImg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VecIntImg_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VecIntImg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VecIntImg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
