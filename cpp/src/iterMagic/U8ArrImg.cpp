// Generated by Haxe 5.0.0-alpha.1+1423a5f
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_U8ArrImg
#include <iterMagic/U8ArrImg.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d7deb1fd76b45ec6_353_new,"iterMagic.U8ArrImg","new",0x8090a550,"iterMagic.U8ArrImg.new","iterMagic/Img.hx",353,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_d7deb1fd76b45ec6_355_set,"iterMagic.U8ArrImg","set",0x80947092,"iterMagic.U8ArrImg.set","iterMagic/Img.hx",355,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_d7deb1fd76b45ec6_364_get,"iterMagic.U8ArrImg","get",0x808b5586,"iterMagic.U8ArrImg.get","iterMagic/Img.hx",364,0x8899afd5)
namespace iterMagic{

void U8ArrImg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d7deb1fd76b45ec6_353_new)
            	}

Dynamic U8ArrImg_obj::__CreateEmpty() { return new U8ArrImg_obj; }

void *U8ArrImg_obj::_hx_vtable = 0;

Dynamic U8ArrImg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< U8ArrImg_obj > _hx_result = new U8ArrImg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool U8ArrImg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x08b74bfa;
}

static ::iterMagic::Iimg_obj _hx_iterMagic_U8ArrImg__hx_iterMagic_Iimg= {
	( int (::hx::Object::*)(int,int))&::iterMagic::U8ArrImg_obj::set,
	( int (::hx::Object::*)(int))&::iterMagic::U8ArrImg_obj::get,
};

void *U8ArrImg_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed2c7ccf: return &_hx_iterMagic_U8ArrImg__hx_iterMagic_Iimg;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int U8ArrImg_obj::set(int index,int value){
            	HX_STACKFRAME(&_hx_pos_d7deb1fd76b45ec6_355_set)
HXLINE( 356)		int w = (index * 4);
HXLINE( 357)		{
HXLINE( 357)			 ::haxe::io::ArrayBufferViewImpl this1 = this->data;
HXDLIN( 357)			int value1 = ((value >> 24) & 255);
HXDLIN( 357)			bool _hx_tmp;
HXDLIN( 357)			if ((w >= 0)) {
HXLINE( 357)				_hx_tmp = (w < this1->byteLength);
            			}
            			else {
HXLINE( 357)				_hx_tmp = false;
            			}
HXDLIN( 357)			if (_hx_tmp) {
HXLINE( 357)				this1->bytes->b[(w + this1->byteOffset)] = ( (unsigned char)(value1) );
            			}
            		}
HXLINE( 358)		{
HXLINE( 358)			 ::haxe::io::ArrayBufferViewImpl this2 = this->data;
HXDLIN( 358)			int index1 = (w + 1);
HXDLIN( 358)			int value2 = ((value >> 16) & 255);
HXDLIN( 358)			bool _hx_tmp1;
HXDLIN( 358)			if ((index1 >= 0)) {
HXLINE( 358)				_hx_tmp1 = (index1 < this2->byteLength);
            			}
            			else {
HXLINE( 358)				_hx_tmp1 = false;
            			}
HXDLIN( 358)			if (_hx_tmp1) {
HXLINE( 358)				this2->bytes->b[(index1 + this2->byteOffset)] = ( (unsigned char)(value2) );
            			}
            		}
HXLINE( 359)		{
HXLINE( 359)			 ::haxe::io::ArrayBufferViewImpl this3 = this->data;
HXDLIN( 359)			int index2 = (w + 2);
HXDLIN( 359)			int value3 = ((value >> 8) & 255);
HXDLIN( 359)			bool _hx_tmp2;
HXDLIN( 359)			if ((index2 >= 0)) {
HXLINE( 359)				_hx_tmp2 = (index2 < this3->byteLength);
            			}
            			else {
HXLINE( 359)				_hx_tmp2 = false;
            			}
HXDLIN( 359)			if (_hx_tmp2) {
HXLINE( 359)				this3->bytes->b[(index2 + this3->byteOffset)] = ( (unsigned char)(value3) );
            			}
            		}
HXLINE( 360)		{
HXLINE( 360)			 ::haxe::io::ArrayBufferViewImpl this4 = this->data;
HXDLIN( 360)			int index3 = (w + 3);
HXDLIN( 360)			int value4 = (value & 255);
HXDLIN( 360)			bool _hx_tmp3;
HXDLIN( 360)			if ((index3 >= 0)) {
HXLINE( 360)				_hx_tmp3 = (index3 < this4->byteLength);
            			}
            			else {
HXLINE( 360)				_hx_tmp3 = false;
            			}
HXDLIN( 360)			if (_hx_tmp3) {
HXLINE( 360)				this4->bytes->b[(index3 + this4->byteOffset)] = ( (unsigned char)(value4) );
            			}
            		}
HXLINE( 361)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(U8ArrImg_obj,set,return )

int U8ArrImg_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_d7deb1fd76b45ec6_364_get)
HXLINE( 365)		int w = (index * 4);
HXLINE( 366)		 ::haxe::io::ArrayBufferViewImpl this1 = this->data;
HXDLIN( 366)		 ::haxe::io::ArrayBufferViewImpl this2 = this->data;
HXDLIN( 366)		 ::haxe::io::ArrayBufferViewImpl this3 = this->data;
HXDLIN( 366)		 ::haxe::io::ArrayBufferViewImpl this4 = this->data;
HXDLIN( 366)		return ((((( (int)(this1->bytes->b->__get((w + this1->byteOffset))) ) << 24) | (( (int)(this2->bytes->b->__get(((w + 1) + this2->byteOffset))) ) << 16)) | (( (int)(this3->bytes->b->__get(((w + 2) + this3->byteOffset))) ) << 8)) | ( (int)(this4->bytes->b->__get(((w + 3) + this4->byteOffset))) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(U8ArrImg_obj,get,return )


::hx::ObjectPtr< U8ArrImg_obj > U8ArrImg_obj::__new() {
	::hx::ObjectPtr< U8ArrImg_obj > __this = new U8ArrImg_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< U8ArrImg_obj > U8ArrImg_obj::__alloc(::hx::Ctx *_hx_ctx) {
	U8ArrImg_obj *__this = (U8ArrImg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(U8ArrImg_obj), true, "iterMagic.U8ArrImg"));
	*(void **)__this = U8ArrImg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

U8ArrImg_obj::U8ArrImg_obj()
{
}

void U8ArrImg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(U8ArrImg);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void U8ArrImg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val U8ArrImg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val U8ArrImg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::io::ArrayBufferViewImpl >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void U8ArrImg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo U8ArrImg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::ArrayBufferViewImpl */ ,(int)offsetof(U8ArrImg_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(U8ArrImg_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(U8ArrImg_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(U8ArrImg_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *U8ArrImg_obj_sStaticStorageInfo = 0;
#endif

static ::String U8ArrImg_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("length",e6,94,07,9f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	::String(null()) };

::hx::Class U8ArrImg_obj::__mClass;

void U8ArrImg_obj::__register()
{
	U8ArrImg_obj _hx_dummy;
	U8ArrImg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.U8ArrImg",5e,fd,e7,61);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(U8ArrImg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< U8ArrImg_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = U8ArrImg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = U8ArrImg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
