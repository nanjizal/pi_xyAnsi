// Generated by Haxe 5.0.0-alpha.1+1423a5f
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_413_new,"iterMagic.StackIntImg","new",0xfabaf115,"iterMagic.StackIntImg.new","iterMagic/Img.hx",413,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_414_set,"iterMagic.StackIntImg","set",0xfabebc57,"iterMagic.StackIntImg.set","iterMagic/Img.hx",414,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_bc8e43a4f06f5941_431_get,"iterMagic.StackIntImg","get",0xfab5a14b,"iterMagic.StackIntImg.get","iterMagic/Img.hx",431,0x8899afd5)
namespace iterMagic{

void StackIntImg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_413_new)
            	}

Dynamic StackIntImg_obj::__CreateEmpty() { return new StackIntImg_obj; }

void *StackIntImg_obj::_hx_vtable = 0;

Dynamic StackIntImg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StackIntImg_obj > _hx_result = new StackIntImg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool StackIntImg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4fcb89eb;
}

static ::iterMagic::Iimg_obj _hx_iterMagic_StackIntImg__hx_iterMagic_Iimg= {
	( int (::hx::Object::*)(int,int))&::iterMagic::StackIntImg_obj::set,
	( int (::hx::Object::*)(int))&::iterMagic::StackIntImg_obj::get,
};

void *StackIntImg_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed2c7ccf: return &_hx_iterMagic_StackIntImg__hx_iterMagic_Iimg;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int StackIntImg_obj::set(int index,int value){
            	HX_GC_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_414_set)
HXLINE( 415)		 ::haxe::ds::GenericCell_Int l = this->data->head;
HXLINE( 416)		 ::haxe::ds::GenericCell_Int prev = null();
HXLINE( 417)		{
HXLINE( 417)			int _g = 0;
HXDLIN( 417)			int _g1 = index;
HXDLIN( 417)			while((_g < _g1)){
HXLINE( 417)				_g = (_g + 1);
HXDLIN( 417)				int i = (_g - 1);
HXLINE( 418)				prev = l;
HXLINE( 419)				l = l->next;
            			}
            		}
HXLINE( 421)		if (::hx::IsNull( prev )) {
HXLINE( 422)			this->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,value,l->next);
HXLINE( 423)			l = null();
            		}
            		else {
HXLINE( 425)			prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,value,l->next);
HXLINE( 426)			l = null();
            		}
HXLINE( 428)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(StackIntImg_obj,set,return )

int StackIntImg_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_bc8e43a4f06f5941_431_get)
HXLINE( 432)		 ::haxe::ds::GenericCell_Int l = this->data->head;
HXLINE( 433)		 ::haxe::ds::GenericCell_Int prev = l;
HXLINE( 434)		index = (index + 1);
HXLINE( 435)		{
HXLINE( 435)			int _g = 0;
HXDLIN( 435)			int _g1 = index;
HXDLIN( 435)			while((_g < _g1)){
HXLINE( 435)				_g = (_g + 1);
HXDLIN( 435)				int i = (_g - 1);
HXLINE( 436)				prev = l;
HXLINE( 437)				l = l->next;
            			}
            		}
HXLINE( 439)		return prev->elt;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StackIntImg_obj,get,return )


::hx::ObjectPtr< StackIntImg_obj > StackIntImg_obj::__new() {
	::hx::ObjectPtr< StackIntImg_obj > __this = new StackIntImg_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< StackIntImg_obj > StackIntImg_obj::__alloc(::hx::Ctx *_hx_ctx) {
	StackIntImg_obj *__this = (StackIntImg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StackIntImg_obj), true, "iterMagic.StackIntImg"));
	*(void **)__this = StackIntImg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

StackIntImg_obj::StackIntImg_obj()
{
}

void StackIntImg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StackIntImg);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void StackIntImg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val StackIntImg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StackIntImg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::ds::GenericStack_Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StackIntImg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StackIntImg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::GenericStack_Int */ ,(int)offsetof(StackIntImg_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(StackIntImg_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StackIntImg_obj_sStaticStorageInfo = 0;
#endif

static ::String StackIntImg_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("length",e6,94,07,9f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	::String(null()) };

::hx::Class StackIntImg_obj::__mClass;

void StackIntImg_obj::__register()
{
	StackIntImg_obj _hx_dummy;
	StackIntImg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.StackIntImg",a3,c2,a5,8e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StackIntImg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StackIntImg_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StackIntImg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StackIntImg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
