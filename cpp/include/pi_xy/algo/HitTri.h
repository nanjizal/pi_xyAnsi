// Generated by Haxe 5.0.0-alpha.1+1423a5f
#ifndef INCLUDED_pi_xy_algo_HitTri
#define INCLUDED_pi_xy_algo_HitTri

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
HX_DECLARE_CLASS2(pi_xy,algo,HitTri)
HX_DECLARE_CLASS2(pi_xy,algo,IhitObj)
HX_DECLARE_CLASS2(pi_xy,algo,TriPoints_)

namespace pi_xy{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES HitTri_obj : public  ::pi_xy::algo::TriPoints__obj
{
	public:
		typedef  ::pi_xy::algo::TriPoints__obj super;
		typedef HitTri_obj OBJ_;
		HitTri_obj();

	public:
		enum { _hx_ClassId = 0x36c8846e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo.HitTri")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo.HitTri"); }

		inline static ::hx::ObjectPtr< HitTri_obj > __new() {
			::hx::ObjectPtr< HitTri_obj > __this = new HitTri_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< HitTri_obj > __alloc(::hx::Ctx *_hx_ctx) {
			HitTri_obj *__this = (HitTri_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitTri_obj), false, "pi_xy.algo.HitTri"));
			*(void **)__this = HitTri_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HitTri_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("HitTri",b8,c4,b1,8b); }

};

} // end namespace pi_xy
} // end namespace algo

#endif /* INCLUDED_pi_xy_algo_HitTri */ 
