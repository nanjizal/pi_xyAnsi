// Generated by Haxe 5.0.0-alpha.1+1423a5f
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#define INCLUDED_pi_xy_algo_TriPoints_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(pi_xy,algo,TriPoints_)

namespace pi_xy{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES TriPoints__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TriPoints__obj OBJ_;
		TriPoints__obj();

	public:
		enum { _hx_ClassId = 0x6c0be2ab };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo.TriPoints_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo.TriPoints_"); }

		inline static ::hx::ObjectPtr< TriPoints__obj > __new() {
			::hx::ObjectPtr< TriPoints__obj > __this = new TriPoints__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TriPoints__obj > __alloc(::hx::Ctx *_hx_ctx) {
			TriPoints__obj *__this = (TriPoints__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TriPoints__obj), false, "pi_xy.algo.TriPoints_"));
			*(void **)__this = TriPoints__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TriPoints__obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TriPoints_",11,db,13,9c); }

};

} // end namespace pi_xy
} // end namespace algo

#endif /* INCLUDED_pi_xy_algo_TriPoints_ */ 
