// Generated by Haxe 5.0.0-alpha.1+1423a5f
#ifndef INCLUDED_pi_xy_imageAbstracts_RGBratios
#define INCLUDED_pi_xy_imageAbstracts_RGBratios

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_668caaed1fd700b2_21_new)
HX_DECLARE_CLASS2(pi_xy,imageAbstracts,RGBratios)

namespace pi_xy{
namespace imageAbstracts{


class HXCPP_CLASS_ATTRIBUTES RGBratios_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef RGBratios_obj OBJ_;
		RGBratios_obj();

	public:
		enum { _hx_ClassId = 0x0f068a3c };

		void __construct(Float red,Float green,Float blue);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.imageAbstracts.RGBratios")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.imageAbstracts.RGBratios"); }

		inline static ::hx::ObjectPtr< RGBratios_obj > __new(Float red,Float green,Float blue) {
			::hx::ObjectPtr< RGBratios_obj > __this = new RGBratios_obj();
			__this->__construct(red,green,blue);
			return __this;
		}

		inline static ::hx::ObjectPtr< RGBratios_obj > __alloc(::hx::Ctx *_hx_ctx,Float red,Float green,Float blue) {
			RGBratios_obj *__this = (RGBratios_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RGBratios_obj), false, "pi_xy.imageAbstracts.RGBratios"));
			*(void **)__this = RGBratios_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_668caaed1fd700b2_21_new)
HXLINE(  22)		Float tot = ((red + green) + blue);
HXLINE(  23)		Float ratio = (( (Float)(1) ) / tot);
HXLINE(  24)		if ((tot == ((Float)1.))) {
HXLINE(  25)			( ( ::pi_xy::imageAbstracts::RGBratios)(__this) )->r = red;
HXLINE(  26)			( ( ::pi_xy::imageAbstracts::RGBratios)(__this) )->g = green;
HXLINE(  27)			( ( ::pi_xy::imageAbstracts::RGBratios)(__this) )->b = blue;
            		}
            		else {
HXLINE(  29)			( ( ::pi_xy::imageAbstracts::RGBratios)(__this) )->r = (red * ratio);
HXLINE(  30)			( ( ::pi_xy::imageAbstracts::RGBratios)(__this) )->g = (green * ratio);
HXLINE(  31)			( ( ::pi_xy::imageAbstracts::RGBratios)(__this) )->b = (blue * ratio);
            		}
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RGBratios_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RGBratios",b5,1b,64,e2); }

		Float r;
		Float g;
		Float b;
};

} // end namespace pi_xy
} // end namespace imageAbstracts

#endif /* INCLUDED_pi_xy_imageAbstracts_RGBratios */ 
