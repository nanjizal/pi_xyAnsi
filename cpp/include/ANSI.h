// Generated by Haxe 5.0.0-alpha.1+1423a5f
#ifndef INCLUDED_ANSI
#define INCLUDED_ANSI

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(ANSI)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,BalancedTree)
HX_DECLARE_CLASS2(haxe,ds,EnumValueMap)



class HXCPP_CLASS_ATTRIBUTES ANSI_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ANSI_obj OBJ_;
		ANSI_obj();

	public:
		enum { _hx_ClassId = 0x3de7b04b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="ANSI")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"ANSI"); }

		inline static ::hx::ObjectPtr< ANSI_obj > __new() {
			::hx::ObjectPtr< ANSI_obj > __this = new ANSI_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< ANSI_obj > __alloc(::hx::Ctx *_hx_ctx) {
			ANSI_obj *__this = (ANSI_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ANSI_obj), false, "ANSI"));
			*(void **)__this = ANSI_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ANSI_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ANSI",c3,56,32,2b); }

		static void __boot();
		static  ::haxe::ds::EnumValueMap values;
		static  ::Dynamic set;
		static bool available;
		static bool strip;
		static bool stripIfUnavailable;
		static ::String aset(::cpp::VirtualArray attributes);
		static ::Dynamic aset_dyn();

		static bool detectSupport();
		static ::Dynamic detectSupport_dyn();

};


#endif /* INCLUDED_ANSI */ 
